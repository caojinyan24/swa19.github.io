# charles
代理到本地:手机设置host为本地ip,端口号为8888.同时charles设置8888端口.

# go语言中传递url
```
confirmQrCodeUrl := &url.URL{
		Scheme: "http",
		Host:   apiRequest.GetHost(),
		Path:   "/passport/open/confirm_qrcode",
		RawQuery: url.Values{
			"token": {token},
		}.Encode(),
	}
```
如果在path中直接拼,返回结果中的特殊字符会被转码


# 二维码转换
http://www.vgot.net/test/image2base64.php?



# kite

# hive
以Hadoop为基础,提供对数据的查询功能,查询通过类sql语句,数据包括hdfs系统的文件和hbase之类的数据

如果希望通过hive查询数据,首先需要把数据接入hive


# 在go程序中调用c代码
cgo
示例代码
```
package print

// #include <stdio.h>
// #include <stdlib.h>
import "C"
import "unsafe"

func Print(s string) {
    cs := C.CString(s)
    defer C.free(unsafe.Pointer(cs))
    C.fputs(cs, (*C.FILE)(C.stdout))
}
```

go语言标准库
sync
big

go 语言自定义string输出
```
package main

import (
    "fmt"
    "strconv"
)

type TwoInts struct {
    a int
    b int
}

func main() {
    two1 := new(TwoInts)
    two1.a = 12
    two1.b = 10
    fmt.Printf("two1 is: %v\n", two1)
    fmt.Println("two1 is:", two1)
    fmt.Printf("two1 is: %T\n", two1)
    fmt.Printf("two1 is: %#v\n", two1)
}

func (tn *TwoInts) String() string {
    return "(" + strconv.Itoa(tn.a) + "/" + strconv.Itoa(tn.b) + ")"
}
```

go 多态
```
type Reader interface {
    Read(p []byte) (n int, err error)
}
    var r io.Reader
    r = os.Stdin    // see 12.1
    r = bufio.NewReader(r)
    r = new(bytes.Buffer)
    f,_ := os.Open("test.txt")
    r = bufio.NewReader(f)

```

接口的嵌套
```
type ReadWrite interface {
    Read(b Buffer) bool
    Write(b Buffer) bool
}

type Lock interface {
    Lock()
    Unlock()
}

type File interface {
    ReadWrite
    Lock
    Close()
}

```
类型检测
```
if v, ok := varI.(T); ok {  // checked type assertion
    Process(v)
    return
}
```

# 分片
https://www.cnblogs.com/xybaby/p/7076731.html
1. 分片解决了什么问题
2. 分片的思想
3. 存在的问题
4. 技术难点


# golang 字符
https://studygolang.com/articles/15472

	var str="abcdd"
	//a:=rune(str[0])
	fmt.Printf("%v",string(str[0]))


charles 使用
dns配置

修改一个东西，没有检查引用方的使用情况

提问方式

go对象的转换和对象指针的转换